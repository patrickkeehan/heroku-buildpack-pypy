#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# Prepend proper path for virtualenv hackery. Will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
PYPY_DIR=$CACHE_DIR/pypy-1.8
NGINX_VERSION=1.3.3

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"
VENDORED_PYPY="https://bitbucket.org/pypy/pypy/downloads/pypy-1.8-linux64.tar.bz2"
NGINX_URL="http://travisj.herokuapp.com/output/4e802be1-b7b3-4a38-9ebe-6e0516aa31c5"

unset GIT_DIR
export PIP_DOWNLOAD_CACHE

mkdir -p $CACHE_DIR
mkdir -p $PIP_DOWNLOAD_CACHE


####################
# Install Nginx
####################
echo "-----> Installing Nginx"
cd ${BUILD_DIR}
if [ ! -d ./vendor/nginx ]; then
	echo "-----> Bundling Nginx v${NGINX_VERSION}"
	mkdir -p ./vendor/nginx && cd ./vendor/nginx
	curl --silent --max-time 60 --location $NGINX_URL | tar xz
fi

##########
# Install pypy-1.8 in CACHE_DIR. Always rebuild it in case something has
# effed up the CACHE_DIR/pypy-1.8 dir, but keep the tarball around so we don't
# have to re-download.
if [ ! -f "$CACHE_DIR/pypy-1.8-linux64.tar.bz2" ]; then
    cd $CACHE_DIR
    echo "-----> Downloading pypy-1.8"
    curl -sLO $VENDORED_PYPY
else
    echo "-----> pypy-1.8 in cache"
fi
cd $CACHE_DIR
rm -fr pypy-1.8
mkdir pypy-1.8
tar -jxf $CACHE_DIR/pypy-1.8-linux64.tar.bz2 -C $PYPY_DIR --strip-components 1
##########

cd $BUILD_DIR

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  $PYPY_DIR/bin/pypy "$ROOT_DIR/src/virtualenv-1.7/virtualenv.py" "$@"
}

# Reject a non-packaged Django app.
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# Warn a checked-in virtualenv.
if [ -d "lib" ] || [ -d "bin" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# Reject a conflicting checked-in virtualenv.
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi

# Create virtualenv. Rebuild if corrupt.
set +e
echo "-----> Preparing virtualenv version $(virtualenv --version)"

# Try to create the virtualenv.
OUT=$(virtualenv --distribute --never-download -p $PYPY_DIR/bin/pypy --prompt=venv . 2>&1)
echo "$OUT" | indent

set -e

# Create set-aside .heroku folder.
mkdir -p .heroku

# Pylibmc support.
source $BIN_DIR/steps/pylibmc

# Activate the virtualenv.
echo "-----> Activating virtualenv"
source bin/activate

pip install --upgrade distribute

# Install mercurial, if needed.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

# Install dependencies.
echo "-----> Installing dependencies using pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --src ./.heroku/src | indent

# Django support.
if [ "$NAME" = "Python/Django" ]; then
  source $BIN_DIR/steps/django
fi

# Make virtualenv relocatable.
set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

##### pypy fixes to BUILD_DIR #####
# virtualenv makes symlinks to include and files within lib_pypy and lib-python
# and we don't want that behavior
rm -fr $BUILD_DIR/include $BUILD_DIR/lib_pypy $BUILD_DIR/lib-python
cp -RL $PYPY_DIR/include $BUILD_DIR/
cp -RL $PYPY_DIR/lib_pypy $BUILD_DIR/
cp -RL $PYPY_DIR/lib-python $BUILD_DIR/
pushd $BUILD_DIR/bin &> /dev/null
rm -f python
ln -s pypy python
popd &> /dev/null
# /pypy fixes #####

# remove "tests" dir from pypy sources
rm -fr $BUILD_DIR/lib-python/2.7/test/
rm -fr $BUILD_DIR/lib-python/2.7/lib2to3/tests/
rm -fr $BUILD_DIR/lib-python/modified-2.7/test/
rm -fr $BUILD_DIR/lib-python/modified-2.7/lib2to3/tests/
rm -fr $BUILD_DIR/lib_pypy/pypy_test/

# Clean up pypy source dir in $CACHE_DIR.
rm -fr $CACHE_DIR/pypy-1.8
rm -fr $CACHE_DIR/bin
rm -fr $CACHE_DIR/include
rm -fr $CACHE_DIR/lib-python
rm -fr $CACHE_DIR/lib_pypy
rm -fr $CACHE_DIR/site-packages
find $CACHE_DIR -name "*.pyc" -delete
find $BUILD_DIR -name "*.pyc" -delete

# Compile .pyc files in $BUILD_DIR
#echo "-----> Compiling .pyc files"
#pypy -m compileall -fq $BUILD_DIR


echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

erb /app/_config/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log
(tail -f -n 0 /app/vendor/nginx/logs/*.log &)

/app/vendor/nginx/sbin/nginx -c /app/vendor/nginx/conf/nginx.conf

newrelic-admin run-program gunicorn wsgi -b 127.0.0.1:8000 -w 4 &
EOF
chmod +x boot.sh

echo "-----> Done with compile"

exit 0
